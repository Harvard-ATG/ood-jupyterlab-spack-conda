# Batch Connect app configuration file
#
# @note Used to define the submitted cluster, title, description, and
#   hard-coded/user-defined attributes that make up this Batch Connect app.
<%-
def arrays_have_common_element(array1, array2)
  # Use the `&` operator to get the intersection of the two arrays
  # If the intersection is not empty, return true, otherwise false
  !(array1 & array2).empty?
end

userGroups = OodSupport::User.new.groups.sort_by(&:id).map(&:name)
# First check if the user is in an admin group
adminGroups = [
  "ondemand-admins-1025174" # HUIT OOD admin group, prod environment
]
if arrays_have_common_element(userGroups, adminGroups)
  cluster="*"
else
  # If the user is not in an admin group, check if they're in an authorized Canvas group
  userCanvasGroups = userGroups.flat_map{ |str| str.scan(/^canvas(\d+)-\d+/) }.flatten
  enabledGroups = [
    # Cannot have other enabled groups if a course installation is in use
    # This is because the course installation uses the course shared folder,
    # which is not accessible to users outside of that course.
    "150890"  # BST 282: Introduction to Computational Biology and Bioinformatics
  ]

  # Check if the groups that the user is in match any of the courses that should
  # have access to this app.

  if arrays_have_common_element(userCanvasGroups, enabledGroups)
    cluster="*"
  else
    cluster="disable_this_app"
  end
end
-%>
---

# **MUST** set cluster id here that matches cluster configuration file located
# under /etc/ood/config/clusters.d/*.yml
# @example Use the Owens cluster at Ohio Supercomputer Center
#     cluster: "owens"
cluster: "<%= cluster %>"

title: "Jupyter Lab - BST 282"
description: |
  This app will launch a Jupyter Notebook server on one or more nodes. This
  configuration uses [Spack](https://spack.io/) to load a
  [Conda](https://anaconda.org/anaconda/conda) environment using
  [Miniconda](https://docs.anaconda.com/miniconda/) to load Jupyter Lab, and
  was built for the course BST 282.<br/><br/>The app launches outside of a
  container, so it has access to slurm commands, but since the app is running as
  a slurm job, the `srun` command will use the resources of the current job,
  rather than starting a new job. That is, unless you first run an `salloc`
  command to allocate a new interactive session.

# Define attribute values that aren't meant to be modified by the user within
# the Dashboard form
attributes:
  course: "150890"
  spack: "conda"
  conda: "bst282"
  environment: "global"

  custom_num_cores:
    widget: "number_field"
    label: "Number of CPUs"
    value: 1
    min: 1
    max: 4
    step: 1

  # Any extra command line arguments to feed to the `jupyter notebook ...`
  # command that launches the Jupyter notebook within the batch job
  extra_jupyter_args: ""

# All of the attributes that make up the Dashboard form (in respective order),
# and made available to the submit configuration file and the template ERB
# files
#
# @note You typically do not need to modify this unless you want to add a new
#   configurable value
# @note If an attribute listed below is hard-coded above in the `attributes`
#   option, then it will not appear in the form page that the user sees in the
#   Dashboard
form:
  - course
  - spack
  - conda
  - environment
  - extra_jupyter_args
  - bc_num_hours
  - custom_num_cores
